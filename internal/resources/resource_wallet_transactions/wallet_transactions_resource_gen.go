// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_wallet_transactions

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func WalletTransactionsResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"amount": schema.StringAttribute{
				Computed:            true,
				Description:         "The amount of credits based on the rate and the currency.",
				MarkdownDescription: "The amount of credits based on the rate and the currency.",
			},
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The date of the wallet transaction creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).",
				MarkdownDescription: "The date of the wallet transaction creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).",
			},
			"credit_amount": schema.StringAttribute{
				Computed:            true,
				Description:         "The number of credits used in the wallet transaction.",
				MarkdownDescription: "The number of credits used in the wallet transaction.",
			},
			"invoice_requires_successful_payment": schema.BoolAttribute{
				Computed:            true,
				Description:         "A boolean setting that, when set to true, delays issuing an invoice for a wallet top-up until a successful payment is made; if false, the invoice is issued immediately upon wallet top-up, regardless of the payment status. Default value of false.",
				MarkdownDescription: "A boolean setting that, when set to true, delays issuing an invoice for a wallet top-up until a successful payment is made; if false, the invoice is issued immediately upon wallet top-up, regardless of the payment status. Default value of false.",
			},
			"lago_id": schema.StringAttribute{
				Computed:            true,
				Description:         "Unique identifier assigned to the wallet transaction within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet transaction's record within the Lago system.",
				MarkdownDescription: "Unique identifier assigned to the wallet transaction within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet transaction's record within the Lago system.",
			},
			"lago_wallet_id": schema.StringAttribute{
				Computed:            true,
				Description:         "Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet's record within the Lago system.",
				MarkdownDescription: "Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet's record within the Lago system.",
			},
			"metadata": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"key": schema.StringAttribute{
							Computed:            true,
							Description:         "The unique identifier for the attribute.",
							MarkdownDescription: "The unique identifier for the attribute.",
						},
						"value": schema.StringAttribute{
							Computed:            true,
							Description:         "The value associated with the key.",
							MarkdownDescription: "The value associated with the key.",
						},
					},
					CustomType: MetadataType{
						ObjectType: types.ObjectType{
							AttrTypes: MetadataValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "This field allows you to store a list of key-value pairs that hold additional information or custom attributes related to the data.",
				MarkdownDescription: "This field allows you to store a list of key-value pairs that hold additional information or custom attributes related to the data.",
			},
			"settled_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The date when wallet transaction is settled, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).",
				MarkdownDescription: "The date when wallet transaction is settled, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).",
			},
			"source": schema.StringAttribute{
				Computed:            true,
				Description:         "The source field represents the origin or trigger of the wallet transaction. Possible values are `manual`, `interval`. `threshold`",
				MarkdownDescription: "The source field represents the origin or trigger of the wallet transaction. Possible values are `manual`, `interval`. `threshold`",
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "The status of the wallet transaction. Possible values are `pending` or `settled`.",
				MarkdownDescription: "The status of the wallet transaction. Possible values are `pending` or `settled`.",
			},
			"transaction_status": schema.StringAttribute{
				Computed:            true,
				Description:         "The transaction status of the wallet transaction. Possible values are `purchased` (with pending or settled status), `granted` (without invoice_id), `voided` or `invoiced`.",
				MarkdownDescription: "The transaction status of the wallet transaction. Possible values are `purchased` (with pending or settled status), `granted` (without invoice_id), `voided` or `invoiced`.",
			},
			"transaction_type": schema.StringAttribute{
				Computed:            true,
				Description:         "The type of transaction. Possible values are `inbound` (increasing the balance) or `outbound` (decreasing the balance).",
				MarkdownDescription: "The type of transaction. Possible values are `inbound` (increasing the balance) or `outbound` (decreasing the balance).",
			},
			"wallet_transaction": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"granted_credits": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The number of free granted credits.",
						MarkdownDescription: "The number of free granted credits.",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("^[0-9]+.?[0-9]*$"), ""),
						},
					},
					"invoice_requires_successful_payment": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "A boolean setting that, when set to true, delays issuing an invoice for a wallet top-up until a successful payment is made; if false, the invoice is issued immediately upon wallet top-up, regardless of the payment status. Default value of false.",
						MarkdownDescription: "A boolean setting that, when set to true, delays issuing an invoice for a wallet top-up until a successful payment is made; if false, the invoice is issued immediately upon wallet top-up, regardless of the payment status. Default value of false.",
					},
					"metadata": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"key": schema.StringAttribute{
									Optional:            true,
									Computed:            true,
									Description:         "The unique identifier for the attribute.",
									MarkdownDescription: "The unique identifier for the attribute.",
								},
								"value": schema.StringAttribute{
									Optional:            true,
									Computed:            true,
									Description:         "The value associated with the key.",
									MarkdownDescription: "The value associated with the key.",
								},
							},
							CustomType: MetadataType{
								ObjectType: types.ObjectType{
									AttrTypes: MetadataValue{}.AttributeTypes(ctx),
								},
							},
						},
						Optional:            true,
						Computed:            true,
						Description:         "This optional field allows you to store a list of key-value pairs that hold additional information or custom attributes related to the data.",
						MarkdownDescription: "This optional field allows you to store a list of key-value pairs that hold additional information or custom attributes related to the data.",
					},
					"paid_credits": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The number of paid credits.",
						MarkdownDescription: "The number of paid credits.",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("^[0-9]+.?[0-9]*$"), ""),
						},
					},
					"voided_credits": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The number of voided credits.",
						MarkdownDescription: "The number of voided credits.",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("^[0-9]+.?[0-9]*$"), ""),
						},
					},
					"wallet_id": schema.StringAttribute{
						Required:            true,
						Description:         "Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet's record within the Lago system.",
						MarkdownDescription: "Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet's record within the Lago system.",
					},
				},
				CustomType: WalletTransactionType{
					ObjectType: types.ObjectType{
						AttrTypes: WalletTransactionValue{}.AttributeTypes(ctx),
					},
				},
				Required: true,
			},
			"wallet_transactions": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"amount": schema.StringAttribute{
							Computed:            true,
							Description:         "The amount of credits based on the rate and the currency.",
							MarkdownDescription: "The amount of credits based on the rate and the currency.",
						},
						"created_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date of the wallet transaction creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).",
							MarkdownDescription: "The date of the wallet transaction creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).",
						},
						"credit_amount": schema.StringAttribute{
							Computed:            true,
							Description:         "The number of credits used in the wallet transaction.",
							MarkdownDescription: "The number of credits used in the wallet transaction.",
						},
						"invoice_requires_successful_payment": schema.BoolAttribute{
							Computed:            true,
							Description:         "A boolean setting that, when set to true, delays issuing an invoice for a wallet top-up until a successful payment is made; if false, the invoice is issued immediately upon wallet top-up, regardless of the payment status. Default value of false.",
							MarkdownDescription: "A boolean setting that, when set to true, delays issuing an invoice for a wallet top-up until a successful payment is made; if false, the invoice is issued immediately upon wallet top-up, regardless of the payment status. Default value of false.",
						},
						"lago_id": schema.StringAttribute{
							Computed:            true,
							Description:         "Unique identifier assigned to the wallet transaction within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet transaction's record within the Lago system.",
							MarkdownDescription: "Unique identifier assigned to the wallet transaction within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet transaction's record within the Lago system.",
						},
						"lago_wallet_id": schema.StringAttribute{
							Computed:            true,
							Description:         "Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet's record within the Lago system.",
							MarkdownDescription: "Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the wallet's record within the Lago system.",
						},
						"metadata": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"key": schema.StringAttribute{
										Computed:            true,
										Description:         "The unique identifier for the attribute.",
										MarkdownDescription: "The unique identifier for the attribute.",
									},
									"value": schema.StringAttribute{
										Computed:            true,
										Description:         "The value associated with the key.",
										MarkdownDescription: "The value associated with the key.",
									},
								},
								CustomType: MetadataType{
									ObjectType: types.ObjectType{
										AttrTypes: MetadataValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "This field allows you to store a list of key-value pairs that hold additional information or custom attributes related to the data.",
							MarkdownDescription: "This field allows you to store a list of key-value pairs that hold additional information or custom attributes related to the data.",
						},
						"settled_at": schema.StringAttribute{
							Computed:            true,
							Description:         "The date when wallet transaction is settled, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).",
							MarkdownDescription: "The date when wallet transaction is settled, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).",
						},
						"source": schema.StringAttribute{
							Computed:            true,
							Description:         "The source field represents the origin or trigger of the wallet transaction. Possible values are `manual`, `interval`. `threshold`",
							MarkdownDescription: "The source field represents the origin or trigger of the wallet transaction. Possible values are `manual`, `interval`. `threshold`",
						},
						"status": schema.StringAttribute{
							Computed:            true,
							Description:         "The status of the wallet transaction. Possible values are `pending` or `settled`.",
							MarkdownDescription: "The status of the wallet transaction. Possible values are `pending` or `settled`.",
						},
						"transaction_status": schema.StringAttribute{
							Computed:            true,
							Description:         "The transaction status of the wallet transaction. Possible values are `purchased` (with pending or settled status), `granted` (without invoice_id), `voided` or `invoiced`.",
							MarkdownDescription: "The transaction status of the wallet transaction. Possible values are `purchased` (with pending or settled status), `granted` (without invoice_id), `voided` or `invoiced`.",
						},
						"transaction_type": schema.StringAttribute{
							Computed:            true,
							Description:         "The type of transaction. Possible values are `inbound` (increasing the balance) or `outbound` (decreasing the balance).",
							MarkdownDescription: "The type of transaction. Possible values are `inbound` (increasing the balance) or `outbound` (decreasing the balance).",
						},
					},
					CustomType: WalletTransactionsType{
						ObjectType: types.ObjectType{
							AttrTypes: WalletTransactionsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type WalletTransactionsModel struct {
	Amount                           types.String           `tfsdk:"amount"`
	CreatedAt                        types.String           `tfsdk:"created_at"`
	CreditAmount                     types.String           `tfsdk:"credit_amount"`
	InvoiceRequiresSuccessfulPayment types.Bool             `tfsdk:"invoice_requires_successful_payment"`
	LagoId                           types.String           `tfsdk:"lago_id"`
	LagoWalletId                     types.String           `tfsdk:"lago_wallet_id"`
	Metadata                         types.List             `tfsdk:"metadata"`
	SettledAt                        types.String           `tfsdk:"settled_at"`
	Source                           types.String           `tfsdk:"source"`
	Status                           types.String           `tfsdk:"status"`
	TransactionStatus                types.String           `tfsdk:"transaction_status"`
	TransactionType                  types.String           `tfsdk:"transaction_type"`
	WalletTransaction                WalletTransactionValue `tfsdk:"wallet_transaction"`
	WalletTransactions               types.List             `tfsdk:"wallet_transactions"`
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	Key   basetypes.StringValue `tfsdk:"key"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"key":   v.Key,
			"value": v.Value,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = WalletTransactionType{}

type WalletTransactionType struct {
	basetypes.ObjectType
}

func (t WalletTransactionType) Equal(o attr.Type) bool {
	other, ok := o.(WalletTransactionType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t WalletTransactionType) String() string {
	return "WalletTransactionType"
}

func (t WalletTransactionType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	grantedCreditsAttribute, ok := attributes["granted_credits"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`granted_credits is missing from object`)

		return nil, diags
	}

	grantedCreditsVal, ok := grantedCreditsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`granted_credits expected to be basetypes.StringValue, was: %T`, grantedCreditsAttribute))
	}

	invoiceRequiresSuccessfulPaymentAttribute, ok := attributes["invoice_requires_successful_payment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`invoice_requires_successful_payment is missing from object`)

		return nil, diags
	}

	invoiceRequiresSuccessfulPaymentVal, ok := invoiceRequiresSuccessfulPaymentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`invoice_requires_successful_payment expected to be basetypes.BoolValue, was: %T`, invoiceRequiresSuccessfulPaymentAttribute))
	}

	metadataAttribute, ok := attributes["metadata"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metadata is missing from object`)

		return nil, diags
	}

	metadataVal, ok := metadataAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metadata expected to be basetypes.ListValue, was: %T`, metadataAttribute))
	}

	paidCreditsAttribute, ok := attributes["paid_credits"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`paid_credits is missing from object`)

		return nil, diags
	}

	paidCreditsVal, ok := paidCreditsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`paid_credits expected to be basetypes.StringValue, was: %T`, paidCreditsAttribute))
	}

	voidedCreditsAttribute, ok := attributes["voided_credits"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`voided_credits is missing from object`)

		return nil, diags
	}

	voidedCreditsVal, ok := voidedCreditsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`voided_credits expected to be basetypes.StringValue, was: %T`, voidedCreditsAttribute))
	}

	walletIdAttribute, ok := attributes["wallet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wallet_id is missing from object`)

		return nil, diags
	}

	walletIdVal, ok := walletIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wallet_id expected to be basetypes.StringValue, was: %T`, walletIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return WalletTransactionValue{
		GrantedCredits:                   grantedCreditsVal,
		InvoiceRequiresSuccessfulPayment: invoiceRequiresSuccessfulPaymentVal,
		Metadata:                         metadataVal,
		PaidCredits:                      paidCreditsVal,
		VoidedCredits:                    voidedCreditsVal,
		WalletId:                         walletIdVal,
		state:                            attr.ValueStateKnown,
	}, diags
}

func NewWalletTransactionValueNull() WalletTransactionValue {
	return WalletTransactionValue{
		state: attr.ValueStateNull,
	}
}

func NewWalletTransactionValueUnknown() WalletTransactionValue {
	return WalletTransactionValue{
		state: attr.ValueStateUnknown,
	}
}

func NewWalletTransactionValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (WalletTransactionValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing WalletTransactionValue Attribute Value",
				"While creating a WalletTransactionValue value, a missing attribute value was detected. "+
					"A WalletTransactionValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WalletTransactionValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid WalletTransactionValue Attribute Type",
				"While creating a WalletTransactionValue value, an invalid attribute value was detected. "+
					"A WalletTransactionValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WalletTransactionValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("WalletTransactionValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra WalletTransactionValue Attribute Value",
				"While creating a WalletTransactionValue value, an extra attribute value was detected. "+
					"A WalletTransactionValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra WalletTransactionValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewWalletTransactionValueUnknown(), diags
	}

	grantedCreditsAttribute, ok := attributes["granted_credits"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`granted_credits is missing from object`)

		return NewWalletTransactionValueUnknown(), diags
	}

	grantedCreditsVal, ok := grantedCreditsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`granted_credits expected to be basetypes.StringValue, was: %T`, grantedCreditsAttribute))
	}

	invoiceRequiresSuccessfulPaymentAttribute, ok := attributes["invoice_requires_successful_payment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`invoice_requires_successful_payment is missing from object`)

		return NewWalletTransactionValueUnknown(), diags
	}

	invoiceRequiresSuccessfulPaymentVal, ok := invoiceRequiresSuccessfulPaymentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`invoice_requires_successful_payment expected to be basetypes.BoolValue, was: %T`, invoiceRequiresSuccessfulPaymentAttribute))
	}

	metadataAttribute, ok := attributes["metadata"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metadata is missing from object`)

		return NewWalletTransactionValueUnknown(), diags
	}

	metadataVal, ok := metadataAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metadata expected to be basetypes.ListValue, was: %T`, metadataAttribute))
	}

	paidCreditsAttribute, ok := attributes["paid_credits"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`paid_credits is missing from object`)

		return NewWalletTransactionValueUnknown(), diags
	}

	paidCreditsVal, ok := paidCreditsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`paid_credits expected to be basetypes.StringValue, was: %T`, paidCreditsAttribute))
	}

	voidedCreditsAttribute, ok := attributes["voided_credits"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`voided_credits is missing from object`)

		return NewWalletTransactionValueUnknown(), diags
	}

	voidedCreditsVal, ok := voidedCreditsAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`voided_credits expected to be basetypes.StringValue, was: %T`, voidedCreditsAttribute))
	}

	walletIdAttribute, ok := attributes["wallet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`wallet_id is missing from object`)

		return NewWalletTransactionValueUnknown(), diags
	}

	walletIdVal, ok := walletIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`wallet_id expected to be basetypes.StringValue, was: %T`, walletIdAttribute))
	}

	if diags.HasError() {
		return NewWalletTransactionValueUnknown(), diags
	}

	return WalletTransactionValue{
		GrantedCredits:                   grantedCreditsVal,
		InvoiceRequiresSuccessfulPayment: invoiceRequiresSuccessfulPaymentVal,
		Metadata:                         metadataVal,
		PaidCredits:                      paidCreditsVal,
		VoidedCredits:                    voidedCreditsVal,
		WalletId:                         walletIdVal,
		state:                            attr.ValueStateKnown,
	}, diags
}

func NewWalletTransactionValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) WalletTransactionValue {
	object, diags := NewWalletTransactionValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewWalletTransactionValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t WalletTransactionType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewWalletTransactionValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewWalletTransactionValueUnknown(), nil
	}

	if in.IsNull() {
		return NewWalletTransactionValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewWalletTransactionValueMust(WalletTransactionValue{}.AttributeTypes(ctx), attributes), nil
}

func (t WalletTransactionType) ValueType(ctx context.Context) attr.Value {
	return WalletTransactionValue{}
}

var _ basetypes.ObjectValuable = WalletTransactionValue{}

type WalletTransactionValue struct {
	GrantedCredits                   basetypes.StringValue `tfsdk:"granted_credits"`
	InvoiceRequiresSuccessfulPayment basetypes.BoolValue   `tfsdk:"invoice_requires_successful_payment"`
	Metadata                         basetypes.ListValue   `tfsdk:"metadata"`
	PaidCredits                      basetypes.StringValue `tfsdk:"paid_credits"`
	VoidedCredits                    basetypes.StringValue `tfsdk:"voided_credits"`
	WalletId                         basetypes.StringValue `tfsdk:"wallet_id"`
	state                            attr.ValueState
}

func (v WalletTransactionValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["granted_credits"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["invoice_requires_successful_payment"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["metadata"] = basetypes.ListType{
		ElemType: MetadataValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["paid_credits"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["voided_credits"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["wallet_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.GrantedCredits.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["granted_credits"] = val

		val, err = v.InvoiceRequiresSuccessfulPayment.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["invoice_requires_successful_payment"] = val

		val, err = v.Metadata.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["metadata"] = val

		val, err = v.PaidCredits.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["paid_credits"] = val

		val, err = v.VoidedCredits.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["voided_credits"] = val

		val, err = v.WalletId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["wallet_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v WalletTransactionValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v WalletTransactionValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v WalletTransactionValue) String() string {
	return "WalletTransactionValue"
}

func (v WalletTransactionValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	metadata := types.ListValueMust(
		MetadataType{
			basetypes.ObjectType{
				AttrTypes: MetadataValue{}.AttributeTypes(ctx),
			},
		},
		v.Metadata.Elements(),
	)

	if v.Metadata.IsNull() {
		metadata = types.ListNull(
			MetadataType{
				basetypes.ObjectType{
					AttrTypes: MetadataValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Metadata.IsUnknown() {
		metadata = types.ListUnknown(
			MetadataType{
				basetypes.ObjectType{
					AttrTypes: MetadataValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"granted_credits":                     basetypes.StringType{},
		"invoice_requires_successful_payment": basetypes.BoolType{},
		"metadata": basetypes.ListType{
			ElemType: MetadataValue{}.Type(ctx),
		},
		"paid_credits":   basetypes.StringType{},
		"voided_credits": basetypes.StringType{},
		"wallet_id":      basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"granted_credits":                     v.GrantedCredits,
			"invoice_requires_successful_payment": v.InvoiceRequiresSuccessfulPayment,
			"metadata":                            metadata,
			"paid_credits":                        v.PaidCredits,
			"voided_credits":                      v.VoidedCredits,
			"wallet_id":                           v.WalletId,
		})

	return objVal, diags
}

func (v WalletTransactionValue) Equal(o attr.Value) bool {
	other, ok := o.(WalletTransactionValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.GrantedCredits.Equal(other.GrantedCredits) {
		return false
	}

	if !v.InvoiceRequiresSuccessfulPayment.Equal(other.InvoiceRequiresSuccessfulPayment) {
		return false
	}

	if !v.Metadata.Equal(other.Metadata) {
		return false
	}

	if !v.PaidCredits.Equal(other.PaidCredits) {
		return false
	}

	if !v.VoidedCredits.Equal(other.VoidedCredits) {
		return false
	}

	if !v.WalletId.Equal(other.WalletId) {
		return false
	}

	return true
}

func (v WalletTransactionValue) Type(ctx context.Context) attr.Type {
	return WalletTransactionType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v WalletTransactionValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"granted_credits":                     basetypes.StringType{},
		"invoice_requires_successful_payment": basetypes.BoolType{},
		"metadata": basetypes.ListType{
			ElemType: MetadataValue{}.Type(ctx),
		},
		"paid_credits":   basetypes.StringType{},
		"voided_credits": basetypes.StringType{},
		"wallet_id":      basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	Key   basetypes.StringValue `tfsdk:"key"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"key":   v.Key,
			"value": v.Value,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = WalletTransactionsType{}

type WalletTransactionsType struct {
	basetypes.ObjectType
}

func (t WalletTransactionsType) Equal(o attr.Type) bool {
	other, ok := o.(WalletTransactionsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t WalletTransactionsType) String() string {
	return "WalletTransactionsType"
}

func (t WalletTransactionsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	amountAttribute, ok := attributes["amount"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount is missing from object`)

		return nil, diags
	}

	amountVal, ok := amountAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount expected to be basetypes.StringValue, was: %T`, amountAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	creditAmountAttribute, ok := attributes["credit_amount"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`credit_amount is missing from object`)

		return nil, diags
	}

	creditAmountVal, ok := creditAmountAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`credit_amount expected to be basetypes.StringValue, was: %T`, creditAmountAttribute))
	}

	invoiceRequiresSuccessfulPaymentAttribute, ok := attributes["invoice_requires_successful_payment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`invoice_requires_successful_payment is missing from object`)

		return nil, diags
	}

	invoiceRequiresSuccessfulPaymentVal, ok := invoiceRequiresSuccessfulPaymentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`invoice_requires_successful_payment expected to be basetypes.BoolValue, was: %T`, invoiceRequiresSuccessfulPaymentAttribute))
	}

	lagoIdAttribute, ok := attributes["lago_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_id is missing from object`)

		return nil, diags
	}

	lagoIdVal, ok := lagoIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_id expected to be basetypes.StringValue, was: %T`, lagoIdAttribute))
	}

	lagoWalletIdAttribute, ok := attributes["lago_wallet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_wallet_id is missing from object`)

		return nil, diags
	}

	lagoWalletIdVal, ok := lagoWalletIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_wallet_id expected to be basetypes.StringValue, was: %T`, lagoWalletIdAttribute))
	}

	metadataAttribute, ok := attributes["metadata"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metadata is missing from object`)

		return nil, diags
	}

	metadataVal, ok := metadataAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metadata expected to be basetypes.ListValue, was: %T`, metadataAttribute))
	}

	settledAtAttribute, ok := attributes["settled_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settled_at is missing from object`)

		return nil, diags
	}

	settledAtVal, ok := settledAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settled_at expected to be basetypes.StringValue, was: %T`, settledAtAttribute))
	}

	sourceAttribute, ok := attributes["source"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`source is missing from object`)

		return nil, diags
	}

	sourceVal, ok := sourceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`source expected to be basetypes.StringValue, was: %T`, sourceAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	transactionStatusAttribute, ok := attributes["transaction_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`transaction_status is missing from object`)

		return nil, diags
	}

	transactionStatusVal, ok := transactionStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`transaction_status expected to be basetypes.StringValue, was: %T`, transactionStatusAttribute))
	}

	transactionTypeAttribute, ok := attributes["transaction_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`transaction_type is missing from object`)

		return nil, diags
	}

	transactionTypeVal, ok := transactionTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`transaction_type expected to be basetypes.StringValue, was: %T`, transactionTypeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return WalletTransactionsValue{
		Amount:                           amountVal,
		CreatedAt:                        createdAtVal,
		CreditAmount:                     creditAmountVal,
		InvoiceRequiresSuccessfulPayment: invoiceRequiresSuccessfulPaymentVal,
		LagoId:                           lagoIdVal,
		LagoWalletId:                     lagoWalletIdVal,
		Metadata:                         metadataVal,
		SettledAt:                        settledAtVal,
		Source:                           sourceVal,
		Status:                           statusVal,
		TransactionStatus:                transactionStatusVal,
		TransactionType:                  transactionTypeVal,
		state:                            attr.ValueStateKnown,
	}, diags
}

func NewWalletTransactionsValueNull() WalletTransactionsValue {
	return WalletTransactionsValue{
		state: attr.ValueStateNull,
	}
}

func NewWalletTransactionsValueUnknown() WalletTransactionsValue {
	return WalletTransactionsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewWalletTransactionsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (WalletTransactionsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing WalletTransactionsValue Attribute Value",
				"While creating a WalletTransactionsValue value, a missing attribute value was detected. "+
					"A WalletTransactionsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WalletTransactionsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid WalletTransactionsValue Attribute Type",
				"While creating a WalletTransactionsValue value, an invalid attribute value was detected. "+
					"A WalletTransactionsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WalletTransactionsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("WalletTransactionsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra WalletTransactionsValue Attribute Value",
				"While creating a WalletTransactionsValue value, an extra attribute value was detected. "+
					"A WalletTransactionsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra WalletTransactionsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewWalletTransactionsValueUnknown(), diags
	}

	amountAttribute, ok := attributes["amount"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount is missing from object`)

		return NewWalletTransactionsValueUnknown(), diags
	}

	amountVal, ok := amountAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount expected to be basetypes.StringValue, was: %T`, amountAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewWalletTransactionsValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	creditAmountAttribute, ok := attributes["credit_amount"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`credit_amount is missing from object`)

		return NewWalletTransactionsValueUnknown(), diags
	}

	creditAmountVal, ok := creditAmountAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`credit_amount expected to be basetypes.StringValue, was: %T`, creditAmountAttribute))
	}

	invoiceRequiresSuccessfulPaymentAttribute, ok := attributes["invoice_requires_successful_payment"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`invoice_requires_successful_payment is missing from object`)

		return NewWalletTransactionsValueUnknown(), diags
	}

	invoiceRequiresSuccessfulPaymentVal, ok := invoiceRequiresSuccessfulPaymentAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`invoice_requires_successful_payment expected to be basetypes.BoolValue, was: %T`, invoiceRequiresSuccessfulPaymentAttribute))
	}

	lagoIdAttribute, ok := attributes["lago_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_id is missing from object`)

		return NewWalletTransactionsValueUnknown(), diags
	}

	lagoIdVal, ok := lagoIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_id expected to be basetypes.StringValue, was: %T`, lagoIdAttribute))
	}

	lagoWalletIdAttribute, ok := attributes["lago_wallet_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_wallet_id is missing from object`)

		return NewWalletTransactionsValueUnknown(), diags
	}

	lagoWalletIdVal, ok := lagoWalletIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_wallet_id expected to be basetypes.StringValue, was: %T`, lagoWalletIdAttribute))
	}

	metadataAttribute, ok := attributes["metadata"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metadata is missing from object`)

		return NewWalletTransactionsValueUnknown(), diags
	}

	metadataVal, ok := metadataAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metadata expected to be basetypes.ListValue, was: %T`, metadataAttribute))
	}

	settledAtAttribute, ok := attributes["settled_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`settled_at is missing from object`)

		return NewWalletTransactionsValueUnknown(), diags
	}

	settledAtVal, ok := settledAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`settled_at expected to be basetypes.StringValue, was: %T`, settledAtAttribute))
	}

	sourceAttribute, ok := attributes["source"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`source is missing from object`)

		return NewWalletTransactionsValueUnknown(), diags
	}

	sourceVal, ok := sourceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`source expected to be basetypes.StringValue, was: %T`, sourceAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewWalletTransactionsValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	transactionStatusAttribute, ok := attributes["transaction_status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`transaction_status is missing from object`)

		return NewWalletTransactionsValueUnknown(), diags
	}

	transactionStatusVal, ok := transactionStatusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`transaction_status expected to be basetypes.StringValue, was: %T`, transactionStatusAttribute))
	}

	transactionTypeAttribute, ok := attributes["transaction_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`transaction_type is missing from object`)

		return NewWalletTransactionsValueUnknown(), diags
	}

	transactionTypeVal, ok := transactionTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`transaction_type expected to be basetypes.StringValue, was: %T`, transactionTypeAttribute))
	}

	if diags.HasError() {
		return NewWalletTransactionsValueUnknown(), diags
	}

	return WalletTransactionsValue{
		Amount:                           amountVal,
		CreatedAt:                        createdAtVal,
		CreditAmount:                     creditAmountVal,
		InvoiceRequiresSuccessfulPayment: invoiceRequiresSuccessfulPaymentVal,
		LagoId:                           lagoIdVal,
		LagoWalletId:                     lagoWalletIdVal,
		Metadata:                         metadataVal,
		SettledAt:                        settledAtVal,
		Source:                           sourceVal,
		Status:                           statusVal,
		TransactionStatus:                transactionStatusVal,
		TransactionType:                  transactionTypeVal,
		state:                            attr.ValueStateKnown,
	}, diags
}

func NewWalletTransactionsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) WalletTransactionsValue {
	object, diags := NewWalletTransactionsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewWalletTransactionsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t WalletTransactionsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewWalletTransactionsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewWalletTransactionsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewWalletTransactionsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewWalletTransactionsValueMust(WalletTransactionsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t WalletTransactionsType) ValueType(ctx context.Context) attr.Value {
	return WalletTransactionsValue{}
}

var _ basetypes.ObjectValuable = WalletTransactionsValue{}

type WalletTransactionsValue struct {
	Amount                           basetypes.StringValue `tfsdk:"amount"`
	CreatedAt                        basetypes.StringValue `tfsdk:"created_at"`
	CreditAmount                     basetypes.StringValue `tfsdk:"credit_amount"`
	InvoiceRequiresSuccessfulPayment basetypes.BoolValue   `tfsdk:"invoice_requires_successful_payment"`
	LagoId                           basetypes.StringValue `tfsdk:"lago_id"`
	LagoWalletId                     basetypes.StringValue `tfsdk:"lago_wallet_id"`
	Metadata                         basetypes.ListValue   `tfsdk:"metadata"`
	SettledAt                        basetypes.StringValue `tfsdk:"settled_at"`
	Source                           basetypes.StringValue `tfsdk:"source"`
	Status                           basetypes.StringValue `tfsdk:"status"`
	TransactionStatus                basetypes.StringValue `tfsdk:"transaction_status"`
	TransactionType                  basetypes.StringValue `tfsdk:"transaction_type"`
	state                            attr.ValueState
}

func (v WalletTransactionsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 12)

	var val tftypes.Value
	var err error

	attrTypes["amount"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["credit_amount"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["invoice_requires_successful_payment"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["lago_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["lago_wallet_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["metadata"] = basetypes.ListType{
		ElemType: MetadataValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["settled_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["source"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["transaction_status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["transaction_type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 12)

		val, err = v.Amount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["amount"] = val

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.CreditAmount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["credit_amount"] = val

		val, err = v.InvoiceRequiresSuccessfulPayment.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["invoice_requires_successful_payment"] = val

		val, err = v.LagoId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lago_id"] = val

		val, err = v.LagoWalletId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lago_wallet_id"] = val

		val, err = v.Metadata.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["metadata"] = val

		val, err = v.SettledAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["settled_at"] = val

		val, err = v.Source.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["source"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		val, err = v.TransactionStatus.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["transaction_status"] = val

		val, err = v.TransactionType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["transaction_type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v WalletTransactionsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v WalletTransactionsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v WalletTransactionsValue) String() string {
	return "WalletTransactionsValue"
}

func (v WalletTransactionsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	metadata := types.ListValueMust(
		MetadataType{
			basetypes.ObjectType{
				AttrTypes: MetadataValue{}.AttributeTypes(ctx),
			},
		},
		v.Metadata.Elements(),
	)

	if v.Metadata.IsNull() {
		metadata = types.ListNull(
			MetadataType{
				basetypes.ObjectType{
					AttrTypes: MetadataValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Metadata.IsUnknown() {
		metadata = types.ListUnknown(
			MetadataType{
				basetypes.ObjectType{
					AttrTypes: MetadataValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"amount":                              basetypes.StringType{},
		"created_at":                          basetypes.StringType{},
		"credit_amount":                       basetypes.StringType{},
		"invoice_requires_successful_payment": basetypes.BoolType{},
		"lago_id":                             basetypes.StringType{},
		"lago_wallet_id":                      basetypes.StringType{},
		"metadata": basetypes.ListType{
			ElemType: MetadataValue{}.Type(ctx),
		},
		"settled_at":         basetypes.StringType{},
		"source":             basetypes.StringType{},
		"status":             basetypes.StringType{},
		"transaction_status": basetypes.StringType{},
		"transaction_type":   basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"amount":                              v.Amount,
			"created_at":                          v.CreatedAt,
			"credit_amount":                       v.CreditAmount,
			"invoice_requires_successful_payment": v.InvoiceRequiresSuccessfulPayment,
			"lago_id":                             v.LagoId,
			"lago_wallet_id":                      v.LagoWalletId,
			"metadata":                            metadata,
			"settled_at":                          v.SettledAt,
			"source":                              v.Source,
			"status":                              v.Status,
			"transaction_status":                  v.TransactionStatus,
			"transaction_type":                    v.TransactionType,
		})

	return objVal, diags
}

func (v WalletTransactionsValue) Equal(o attr.Value) bool {
	other, ok := o.(WalletTransactionsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Amount.Equal(other.Amount) {
		return false
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.CreditAmount.Equal(other.CreditAmount) {
		return false
	}

	if !v.InvoiceRequiresSuccessfulPayment.Equal(other.InvoiceRequiresSuccessfulPayment) {
		return false
	}

	if !v.LagoId.Equal(other.LagoId) {
		return false
	}

	if !v.LagoWalletId.Equal(other.LagoWalletId) {
		return false
	}

	if !v.Metadata.Equal(other.Metadata) {
		return false
	}

	if !v.SettledAt.Equal(other.SettledAt) {
		return false
	}

	if !v.Source.Equal(other.Source) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	if !v.TransactionStatus.Equal(other.TransactionStatus) {
		return false
	}

	if !v.TransactionType.Equal(other.TransactionType) {
		return false
	}

	return true
}

func (v WalletTransactionsValue) Type(ctx context.Context) attr.Type {
	return WalletTransactionsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v WalletTransactionsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"amount":                              basetypes.StringType{},
		"created_at":                          basetypes.StringType{},
		"credit_amount":                       basetypes.StringType{},
		"invoice_requires_successful_payment": basetypes.BoolType{},
		"lago_id":                             basetypes.StringType{},
		"lago_wallet_id":                      basetypes.StringType{},
		"metadata": basetypes.ListType{
			ElemType: MetadataValue{}.Type(ctx),
		},
		"settled_at":         basetypes.StringType{},
		"source":             basetypes.StringType{},
		"status":             basetypes.StringType{},
		"transaction_status": basetypes.StringType{},
		"transaction_type":   basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	Key   basetypes.StringValue `tfsdk:"key"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"key":   v.Key,
			"value": v.Value,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}
