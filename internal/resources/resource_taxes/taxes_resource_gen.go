// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_taxes

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func TaxesResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"code": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The code of the tax. It serves as a unique identifier associated with a particular tax. The code is typically used for internal or system-level identification purposes.",
				MarkdownDescription: "The code of the tax. It serves as a unique identifier associated with a particular tax. The code is typically used for internal or system-level identification purposes.",
			},
			"tax": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"applied_to_organization": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Set to `true` if the tax is used as one of the organization's default",
						MarkdownDescription: "Set to `true` if the tax is used as one of the organization's default",
					},
					"code": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Unique code used to identify the tax associated with the API request.",
						MarkdownDescription: "Unique code used to identify the tax associated with the API request.",
					},
					"created_at": schema.StringAttribute{
						Computed:            true,
						Description:         "Creation date of the tax.",
						MarkdownDescription: "Creation date of the tax.",
					},
					"description": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Internal description of the taxe",
						MarkdownDescription: "Internal description of the taxe",
					},
					"lago_id": schema.StringAttribute{
						Computed:            true,
						Description:         "Unique identifier of the tax, created by Lago.",
						MarkdownDescription: "Unique identifier of the tax, created by Lago.",
					},
					"name": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Name of the tax.",
						MarkdownDescription: "Name of the tax.",
					},
					"rate": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The percentage rate of the tax",
						MarkdownDescription: "The percentage rate of the tax",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("^[0-9]+.?[0-9]*$"), ""),
						},
					},
				},
				CustomType: TaxType{
					ObjectType: types.ObjectType{
						AttrTypes: TaxValue{}.AttributeTypes(ctx),
					},
				},
				Required: true,
			},
		},
	}
}

type TaxesModel struct {
	Code types.String `tfsdk:"code"`
	Tax  TaxValue     `tfsdk:"tax"`
}

var _ basetypes.ObjectTypable = TaxType{}

type TaxType struct {
	basetypes.ObjectType
}

func (t TaxType) Equal(o attr.Type) bool {
	other, ok := o.(TaxType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TaxType) String() string {
	return "TaxType"
}

func (t TaxType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	appliedToOrganizationAttribute, ok := attributes["applied_to_organization"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`applied_to_organization is missing from object`)

		return nil, diags
	}

	appliedToOrganizationVal, ok := appliedToOrganizationAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`applied_to_organization expected to be basetypes.BoolValue, was: %T`, appliedToOrganizationAttribute))
	}

	codeAttribute, ok := attributes["code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`code is missing from object`)

		return nil, diags
	}

	codeVal, ok := codeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`code expected to be basetypes.StringValue, was: %T`, codeAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	lagoIdAttribute, ok := attributes["lago_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_id is missing from object`)

		return nil, diags
	}

	lagoIdVal, ok := lagoIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_id expected to be basetypes.StringValue, was: %T`, lagoIdAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	rateAttribute, ok := attributes["rate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rate is missing from object`)

		return nil, diags
	}

	rateVal, ok := rateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rate expected to be basetypes.StringValue, was: %T`, rateAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TaxValue{
		AppliedToOrganization: appliedToOrganizationVal,
		Code:                  codeVal,
		CreatedAt:             createdAtVal,
		Description:           descriptionVal,
		LagoId:                lagoIdVal,
		Name:                  nameVal,
		Rate:                  rateVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewTaxValueNull() TaxValue {
	return TaxValue{
		state: attr.ValueStateNull,
	}
}

func NewTaxValueUnknown() TaxValue {
	return TaxValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTaxValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TaxValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TaxValue Attribute Value",
				"While creating a TaxValue value, a missing attribute value was detected. "+
					"A TaxValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TaxValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TaxValue Attribute Type",
				"While creating a TaxValue value, an invalid attribute value was detected. "+
					"A TaxValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TaxValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TaxValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TaxValue Attribute Value",
				"While creating a TaxValue value, an extra attribute value was detected. "+
					"A TaxValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TaxValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTaxValueUnknown(), diags
	}

	appliedToOrganizationAttribute, ok := attributes["applied_to_organization"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`applied_to_organization is missing from object`)

		return NewTaxValueUnknown(), diags
	}

	appliedToOrganizationVal, ok := appliedToOrganizationAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`applied_to_organization expected to be basetypes.BoolValue, was: %T`, appliedToOrganizationAttribute))
	}

	codeAttribute, ok := attributes["code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`code is missing from object`)

		return NewTaxValueUnknown(), diags
	}

	codeVal, ok := codeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`code expected to be basetypes.StringValue, was: %T`, codeAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewTaxValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewTaxValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	lagoIdAttribute, ok := attributes["lago_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_id is missing from object`)

		return NewTaxValueUnknown(), diags
	}

	lagoIdVal, ok := lagoIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_id expected to be basetypes.StringValue, was: %T`, lagoIdAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewTaxValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	rateAttribute, ok := attributes["rate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`rate is missing from object`)

		return NewTaxValueUnknown(), diags
	}

	rateVal, ok := rateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`rate expected to be basetypes.StringValue, was: %T`, rateAttribute))
	}

	if diags.HasError() {
		return NewTaxValueUnknown(), diags
	}

	return TaxValue{
		AppliedToOrganization: appliedToOrganizationVal,
		Code:                  codeVal,
		CreatedAt:             createdAtVal,
		Description:           descriptionVal,
		LagoId:                lagoIdVal,
		Name:                  nameVal,
		Rate:                  rateVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewTaxValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TaxValue {
	object, diags := NewTaxValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTaxValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TaxType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTaxValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTaxValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTaxValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTaxValueMust(TaxValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TaxType) ValueType(ctx context.Context) attr.Value {
	return TaxValue{}
}

var _ basetypes.ObjectValuable = TaxValue{}

type TaxValue struct {
	AppliedToOrganization basetypes.BoolValue   `tfsdk:"applied_to_organization"`
	Code                  basetypes.StringValue `tfsdk:"code"`
	CreatedAt             basetypes.StringValue `tfsdk:"created_at"`
	Description           basetypes.StringValue `tfsdk:"description"`
	LagoId                basetypes.StringValue `tfsdk:"lago_id"`
	Name                  basetypes.StringValue `tfsdk:"name"`
	Rate                  basetypes.StringValue `tfsdk:"rate"`
	state                 attr.ValueState
}

func (v TaxValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["applied_to_organization"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["code"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["lago_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["rate"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.AppliedToOrganization.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["applied_to_organization"] = val

		val, err = v.Code.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["code"] = val

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.LagoId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lago_id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Rate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["rate"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TaxValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TaxValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TaxValue) String() string {
	return "TaxValue"
}

func (v TaxValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"applied_to_organization": basetypes.BoolType{},
		"code":                    basetypes.StringType{},
		"created_at":              basetypes.StringType{},
		"description":             basetypes.StringType{},
		"lago_id":                 basetypes.StringType{},
		"name":                    basetypes.StringType{},
		"rate":                    basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"applied_to_organization": v.AppliedToOrganization,
			"code":                    v.Code,
			"created_at":              v.CreatedAt,
			"description":             v.Description,
			"lago_id":                 v.LagoId,
			"name":                    v.Name,
			"rate":                    v.Rate,
		})

	return objVal, diags
}

func (v TaxValue) Equal(o attr.Value) bool {
	other, ok := o.(TaxValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AppliedToOrganization.Equal(other.AppliedToOrganization) {
		return false
	}

	if !v.Code.Equal(other.Code) {
		return false
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.LagoId.Equal(other.LagoId) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Rate.Equal(other.Rate) {
		return false
	}

	return true
}

func (v TaxValue) Type(ctx context.Context) attr.Type {
	return TaxType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TaxValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"applied_to_organization": basetypes.BoolType{},
		"code":                    basetypes.StringType{},
		"created_at":              basetypes.StringType{},
		"description":             basetypes.StringType{},
		"lago_id":                 basetypes.StringType{},
		"name":                    basetypes.StringType{},
		"rate":                    basetypes.StringType{},
	}
}
