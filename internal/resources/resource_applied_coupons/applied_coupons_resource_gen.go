// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_applied_coupons

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func AppliedCouponsResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"applied_coupon": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"amount_cents": schema.Int64Attribute{
						Optional:            true,
						Computed:            true,
						Description:         "The amount of the coupon in cents. This field is required only for coupon with `fixed_amount` type.",
						MarkdownDescription: "The amount of the coupon in cents. This field is required only for coupon with `fixed_amount` type.",
					},
					"amount_cents_remaining": schema.Int64Attribute{
						Computed:            true,
						Description:         "The remaining amount in cents for a `fixed_amount` coupon with a frequency set to `once`. This field indicates the remaining balance or value that can still be utilized from the coupon.",
						MarkdownDescription: "The remaining amount in cents for a `fixed_amount` coupon with a frequency set to `once`. This field indicates the remaining balance or value that can still be utilized from the coupon.",
					},
					"amount_currency": schema.StringAttribute{
						Optional: true,
						Computed: true,
						Validators: []validator.String{
							stringvalidator.OneOf(
								"AED",
								"AFN",
								"ALL",
								"AMD",
								"ANG",
								"AOA",
								"ARS",
								"AUD",
								"AWG",
								"AZN",
								"BAM",
								"BBD",
								"BDT",
								"BGN",
								"BIF",
								"BMD",
								"BND",
								"BOB",
								"BRL",
								"BSD",
								"BWP",
								"BYN",
								"BZD",
								"CAD",
								"CDF",
								"CHF",
								"CLF",
								"CLP",
								"CNY",
								"COP",
								"CRC",
								"CVE",
								"CZK",
								"DJF",
								"DKK",
								"DOP",
								"DZD",
								"EGP",
								"ETB",
								"EUR",
								"FJD",
								"FKP",
								"GBP",
								"GEL",
								"GIP",
								"GMD",
								"GNF",
								"GTQ",
								"GYD",
								"HKD",
								"HNL",
								"HRK",
								"HTG",
								"HUF",
								"IDR",
								"ILS",
								"INR",
								"ISK",
								"JMD",
								"JPY",
								"KES",
								"KGS",
								"KHR",
								"KMF",
								"KRW",
								"KYD",
								"KZT",
								"LAK",
								"LBP",
								"LKR",
								"LRD",
								"LSL",
								"MAD",
								"MDL",
								"MGA",
								"MKD",
								"MMK",
								"MNT",
								"MOP",
								"MRO",
								"MUR",
								"MVR",
								"MWK",
								"MXN",
								"MYR",
								"MZN",
								"NAD",
								"NGN",
								"NIO",
								"NOK",
								"NPR",
								"NZD",
								"PAB",
								"PEN",
								"PGK",
								"PHP",
								"PKR",
								"PLN",
								"PYG",
								"QAR",
								"RON",
								"RSD",
								"RUB",
								"RWF",
								"SAR",
								"SBD",
								"SCR",
								"SEK",
								"SGD",
								"SHP",
								"SLL",
								"SOS",
								"SRD",
								"STD",
								"SZL",
								"THB",
								"TJS",
								"TOP",
								"TRY",
								"TTD",
								"TWD",
								"TZS",
								"UAH",
								"UGX",
								"USD",
								"UYU",
								"UZS",
								"VND",
								"VUV",
								"WST",
								"XAF",
								"XCD",
								"XOF",
								"XPF",
								"YER",
								"ZAR",
								"ZMW",
							),
						},
					},
					"coupon_code": schema.StringAttribute{
						Required:            true,
						Description:         "Unique code used to identify the coupon.",
						MarkdownDescription: "Unique code used to identify the coupon.",
					},
					"coupon_name": schema.StringAttribute{
						Computed:            true,
						Description:         "The name of the coupon.",
						MarkdownDescription: "The name of the coupon.",
					},
					"created_at": schema.StringAttribute{
						Computed:            true,
						Description:         "The date and time when the coupon was assigned to a customer. It is expressed in UTC format according to the ISO 8601 datetime standard.",
						MarkdownDescription: "The date and time when the coupon was assigned to a customer. It is expressed in UTC format according to the ISO 8601 datetime standard.",
					},
					"expiration_at": schema.StringAttribute{
						Computed:            true,
						Description:         "The date and time after which the coupon will stop applying to customer's invoices. Once the expiration date is reached, the coupon will no longer be applicable, and any further invoices generated for the customer will not include the coupon discount.",
						MarkdownDescription: "The date and time after which the coupon will stop applying to customer's invoices. Once the expiration date is reached, the coupon will no longer be applicable, and any further invoices generated for the customer will not include the coupon discount.",
					},
					"external_customer_id": schema.StringAttribute{
						Required:            true,
						Description:         "The customer external unique identifier (provided by your own application)",
						MarkdownDescription: "The customer external unique identifier (provided by your own application)",
					},
					"frequency": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The type of frequency for the coupon. It can have three possible values: `once`, `recurring` or `forever`.\n\n- If set to `once`, the coupon is applicable only for a single use.\n- If set to `recurring`, the coupon can be used multiple times for recurring billing periods.\n- If set to `forever`, the coupon has unlimited usage and can be applied indefinitely.",
						MarkdownDescription: "The type of frequency for the coupon. It can have three possible values: `once`, `recurring` or `forever`.\n\n- If set to `once`, the coupon is applicable only for a single use.\n- If set to `recurring`, the coupon can be used multiple times for recurring billing periods.\n- If set to `forever`, the coupon has unlimited usage and can be applied indefinitely.",
						Validators: []validator.String{
							stringvalidator.OneOf(
								"once",
								"recurring",
								"forever",
							),
						},
					},
					"frequency_duration": schema.Int64Attribute{
						Optional:            true,
						Computed:            true,
						Description:         "Specifies the number of billing periods to which the coupon applies. This field is required only for coupons with a `recurring` frequency type",
						MarkdownDescription: "Specifies the number of billing periods to which the coupon applies. This field is required only for coupons with a `recurring` frequency type",
					},
					"frequency_duration_remaining": schema.Int64Attribute{
						Computed:            true,
						Description:         "The remaining number of billing periods to which the coupon is applicable. This field determines the remaining usage or availability of the coupon based on the remaining billing periods.",
						MarkdownDescription: "The remaining number of billing periods to which the coupon is applicable. This field determines the remaining usage or availability of the coupon based on the remaining billing periods.",
					},
					"lago_coupon_id": schema.StringAttribute{
						Computed:            true,
						Description:         "Unique identifier of the coupon, created by Lago.",
						MarkdownDescription: "Unique identifier of the coupon, created by Lago.",
					},
					"lago_customer_id": schema.StringAttribute{
						Computed:            true,
						Description:         "Unique identifier of the customer, created by Lago.",
						MarkdownDescription: "Unique identifier of the customer, created by Lago.",
					},
					"lago_id": schema.StringAttribute{
						Computed:            true,
						Description:         "Unique identifier of the applied coupon, created by Lago.",
						MarkdownDescription: "Unique identifier of the applied coupon, created by Lago.",
					},
					"percentage_rate": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The percentage rate of the coupon. This field is required only for coupons with a `percentage` coupon type.",
						MarkdownDescription: "The percentage rate of the coupon. This field is required only for coupons with a `percentage` coupon type.",
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile("^[0-9]+.?[0-9]*$"), ""),
						},
					},
					"status": schema.StringAttribute{
						Computed:            true,
						Description:         "The status of the coupon. Can be either `active` or `terminated`.",
						MarkdownDescription: "The status of the coupon. Can be either `active` or `terminated`.",
					},
					"terminated_at": schema.StringAttribute{
						Computed:            true,
						Description:         "This field indicates the specific moment when the coupon amount is fully utilized or when the coupon is removed from the customer's coupon list. It is expressed in UTC format according to the ISO 8601 datetime standard.",
						MarkdownDescription: "This field indicates the specific moment when the coupon amount is fully utilized or when the coupon is removed from the customer's coupon list. It is expressed in UTC format according to the ISO 8601 datetime standard.",
					},
				},
				CustomType: AppliedCouponType{
					ObjectType: types.ObjectType{
						AttrTypes: AppliedCouponValue{}.AttributeTypes(ctx),
					},
				},
				Required: true,
			},
			"external_customer_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The customer external unique identifier (provided by your own application)",
				MarkdownDescription: "The customer external unique identifier (provided by your own application)",
			},
			"page": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Page number.",
				MarkdownDescription: "Page number.",
			},
			"per_page": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Number of records per page.",
				MarkdownDescription: "Number of records per page.",
			},
			"status": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The status of the coupon. Can be either `active` or `terminated`.",
				MarkdownDescription: "The status of the coupon. Can be either `active` or `terminated`.",
				Validators: []validator.String{
					stringvalidator.OneOf(
						"active",
						"terminated",
					),
				},
			},
		},
	}
}

type AppliedCouponsModel struct {
	AppliedCoupon      AppliedCouponValue `tfsdk:"applied_coupon"`
	ExternalCustomerId types.String       `tfsdk:"external_customer_id"`
	Page               types.Int64        `tfsdk:"page"`
	PerPage            types.Int64        `tfsdk:"per_page"`
	Status             types.String       `tfsdk:"status"`
}

var _ basetypes.ObjectTypable = AppliedCouponType{}

type AppliedCouponType struct {
	basetypes.ObjectType
}

func (t AppliedCouponType) Equal(o attr.Type) bool {
	other, ok := o.(AppliedCouponType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AppliedCouponType) String() string {
	return "AppliedCouponType"
}

func (t AppliedCouponType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	amountCentsAttribute, ok := attributes["amount_cents"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount_cents is missing from object`)

		return nil, diags
	}

	amountCentsVal, ok := amountCentsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount_cents expected to be basetypes.Int64Value, was: %T`, amountCentsAttribute))
	}

	amountCentsRemainingAttribute, ok := attributes["amount_cents_remaining"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount_cents_remaining is missing from object`)

		return nil, diags
	}

	amountCentsRemainingVal, ok := amountCentsRemainingAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount_cents_remaining expected to be basetypes.Int64Value, was: %T`, amountCentsRemainingAttribute))
	}

	amountCurrencyAttribute, ok := attributes["amount_currency"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount_currency is missing from object`)

		return nil, diags
	}

	amountCurrencyVal, ok := amountCurrencyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount_currency expected to be basetypes.StringValue, was: %T`, amountCurrencyAttribute))
	}

	couponCodeAttribute, ok := attributes["coupon_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`coupon_code is missing from object`)

		return nil, diags
	}

	couponCodeVal, ok := couponCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`coupon_code expected to be basetypes.StringValue, was: %T`, couponCodeAttribute))
	}

	couponNameAttribute, ok := attributes["coupon_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`coupon_name is missing from object`)

		return nil, diags
	}

	couponNameVal, ok := couponNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`coupon_name expected to be basetypes.StringValue, was: %T`, couponNameAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	expirationAtAttribute, ok := attributes["expiration_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`expiration_at is missing from object`)

		return nil, diags
	}

	expirationAtVal, ok := expirationAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`expiration_at expected to be basetypes.StringValue, was: %T`, expirationAtAttribute))
	}

	externalCustomerIdAttribute, ok := attributes["external_customer_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`external_customer_id is missing from object`)

		return nil, diags
	}

	externalCustomerIdVal, ok := externalCustomerIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`external_customer_id expected to be basetypes.StringValue, was: %T`, externalCustomerIdAttribute))
	}

	frequencyAttribute, ok := attributes["frequency"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`frequency is missing from object`)

		return nil, diags
	}

	frequencyVal, ok := frequencyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`frequency expected to be basetypes.StringValue, was: %T`, frequencyAttribute))
	}

	frequencyDurationAttribute, ok := attributes["frequency_duration"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`frequency_duration is missing from object`)

		return nil, diags
	}

	frequencyDurationVal, ok := frequencyDurationAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`frequency_duration expected to be basetypes.Int64Value, was: %T`, frequencyDurationAttribute))
	}

	frequencyDurationRemainingAttribute, ok := attributes["frequency_duration_remaining"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`frequency_duration_remaining is missing from object`)

		return nil, diags
	}

	frequencyDurationRemainingVal, ok := frequencyDurationRemainingAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`frequency_duration_remaining expected to be basetypes.Int64Value, was: %T`, frequencyDurationRemainingAttribute))
	}

	lagoCouponIdAttribute, ok := attributes["lago_coupon_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_coupon_id is missing from object`)

		return nil, diags
	}

	lagoCouponIdVal, ok := lagoCouponIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_coupon_id expected to be basetypes.StringValue, was: %T`, lagoCouponIdAttribute))
	}

	lagoCustomerIdAttribute, ok := attributes["lago_customer_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_customer_id is missing from object`)

		return nil, diags
	}

	lagoCustomerIdVal, ok := lagoCustomerIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_customer_id expected to be basetypes.StringValue, was: %T`, lagoCustomerIdAttribute))
	}

	lagoIdAttribute, ok := attributes["lago_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_id is missing from object`)

		return nil, diags
	}

	lagoIdVal, ok := lagoIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_id expected to be basetypes.StringValue, was: %T`, lagoIdAttribute))
	}

	percentageRateAttribute, ok := attributes["percentage_rate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`percentage_rate is missing from object`)

		return nil, diags
	}

	percentageRateVal, ok := percentageRateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`percentage_rate expected to be basetypes.StringValue, was: %T`, percentageRateAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	terminatedAtAttribute, ok := attributes["terminated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`terminated_at is missing from object`)

		return nil, diags
	}

	terminatedAtVal, ok := terminatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`terminated_at expected to be basetypes.StringValue, was: %T`, terminatedAtAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AppliedCouponValue{
		AmountCents:                amountCentsVal,
		AmountCentsRemaining:       amountCentsRemainingVal,
		AmountCurrency:             amountCurrencyVal,
		CouponCode:                 couponCodeVal,
		CouponName:                 couponNameVal,
		CreatedAt:                  createdAtVal,
		ExpirationAt:               expirationAtVal,
		ExternalCustomerId:         externalCustomerIdVal,
		Frequency:                  frequencyVal,
		FrequencyDuration:          frequencyDurationVal,
		FrequencyDurationRemaining: frequencyDurationRemainingVal,
		LagoCouponId:               lagoCouponIdVal,
		LagoCustomerId:             lagoCustomerIdVal,
		LagoId:                     lagoIdVal,
		PercentageRate:             percentageRateVal,
		Status:                     statusVal,
		TerminatedAt:               terminatedAtVal,
		state:                      attr.ValueStateKnown,
	}, diags
}

func NewAppliedCouponValueNull() AppliedCouponValue {
	return AppliedCouponValue{
		state: attr.ValueStateNull,
	}
}

func NewAppliedCouponValueUnknown() AppliedCouponValue {
	return AppliedCouponValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAppliedCouponValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AppliedCouponValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AppliedCouponValue Attribute Value",
				"While creating a AppliedCouponValue value, a missing attribute value was detected. "+
					"A AppliedCouponValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AppliedCouponValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AppliedCouponValue Attribute Type",
				"While creating a AppliedCouponValue value, an invalid attribute value was detected. "+
					"A AppliedCouponValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AppliedCouponValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AppliedCouponValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AppliedCouponValue Attribute Value",
				"While creating a AppliedCouponValue value, an extra attribute value was detected. "+
					"A AppliedCouponValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AppliedCouponValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAppliedCouponValueUnknown(), diags
	}

	amountCentsAttribute, ok := attributes["amount_cents"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount_cents is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	amountCentsVal, ok := amountCentsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount_cents expected to be basetypes.Int64Value, was: %T`, amountCentsAttribute))
	}

	amountCentsRemainingAttribute, ok := attributes["amount_cents_remaining"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount_cents_remaining is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	amountCentsRemainingVal, ok := amountCentsRemainingAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount_cents_remaining expected to be basetypes.Int64Value, was: %T`, amountCentsRemainingAttribute))
	}

	amountCurrencyAttribute, ok := attributes["amount_currency"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`amount_currency is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	amountCurrencyVal, ok := amountCurrencyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`amount_currency expected to be basetypes.StringValue, was: %T`, amountCurrencyAttribute))
	}

	couponCodeAttribute, ok := attributes["coupon_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`coupon_code is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	couponCodeVal, ok := couponCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`coupon_code expected to be basetypes.StringValue, was: %T`, couponCodeAttribute))
	}

	couponNameAttribute, ok := attributes["coupon_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`coupon_name is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	couponNameVal, ok := couponNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`coupon_name expected to be basetypes.StringValue, was: %T`, couponNameAttribute))
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	expirationAtAttribute, ok := attributes["expiration_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`expiration_at is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	expirationAtVal, ok := expirationAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`expiration_at expected to be basetypes.StringValue, was: %T`, expirationAtAttribute))
	}

	externalCustomerIdAttribute, ok := attributes["external_customer_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`external_customer_id is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	externalCustomerIdVal, ok := externalCustomerIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`external_customer_id expected to be basetypes.StringValue, was: %T`, externalCustomerIdAttribute))
	}

	frequencyAttribute, ok := attributes["frequency"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`frequency is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	frequencyVal, ok := frequencyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`frequency expected to be basetypes.StringValue, was: %T`, frequencyAttribute))
	}

	frequencyDurationAttribute, ok := attributes["frequency_duration"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`frequency_duration is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	frequencyDurationVal, ok := frequencyDurationAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`frequency_duration expected to be basetypes.Int64Value, was: %T`, frequencyDurationAttribute))
	}

	frequencyDurationRemainingAttribute, ok := attributes["frequency_duration_remaining"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`frequency_duration_remaining is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	frequencyDurationRemainingVal, ok := frequencyDurationRemainingAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`frequency_duration_remaining expected to be basetypes.Int64Value, was: %T`, frequencyDurationRemainingAttribute))
	}

	lagoCouponIdAttribute, ok := attributes["lago_coupon_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_coupon_id is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	lagoCouponIdVal, ok := lagoCouponIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_coupon_id expected to be basetypes.StringValue, was: %T`, lagoCouponIdAttribute))
	}

	lagoCustomerIdAttribute, ok := attributes["lago_customer_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_customer_id is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	lagoCustomerIdVal, ok := lagoCustomerIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_customer_id expected to be basetypes.StringValue, was: %T`, lagoCustomerIdAttribute))
	}

	lagoIdAttribute, ok := attributes["lago_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_id is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	lagoIdVal, ok := lagoIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_id expected to be basetypes.StringValue, was: %T`, lagoIdAttribute))
	}

	percentageRateAttribute, ok := attributes["percentage_rate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`percentage_rate is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	percentageRateVal, ok := percentageRateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`percentage_rate expected to be basetypes.StringValue, was: %T`, percentageRateAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	terminatedAtAttribute, ok := attributes["terminated_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`terminated_at is missing from object`)

		return NewAppliedCouponValueUnknown(), diags
	}

	terminatedAtVal, ok := terminatedAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`terminated_at expected to be basetypes.StringValue, was: %T`, terminatedAtAttribute))
	}

	if diags.HasError() {
		return NewAppliedCouponValueUnknown(), diags
	}

	return AppliedCouponValue{
		AmountCents:                amountCentsVal,
		AmountCentsRemaining:       amountCentsRemainingVal,
		AmountCurrency:             amountCurrencyVal,
		CouponCode:                 couponCodeVal,
		CouponName:                 couponNameVal,
		CreatedAt:                  createdAtVal,
		ExpirationAt:               expirationAtVal,
		ExternalCustomerId:         externalCustomerIdVal,
		Frequency:                  frequencyVal,
		FrequencyDuration:          frequencyDurationVal,
		FrequencyDurationRemaining: frequencyDurationRemainingVal,
		LagoCouponId:               lagoCouponIdVal,
		LagoCustomerId:             lagoCustomerIdVal,
		LagoId:                     lagoIdVal,
		PercentageRate:             percentageRateVal,
		Status:                     statusVal,
		TerminatedAt:               terminatedAtVal,
		state:                      attr.ValueStateKnown,
	}, diags
}

func NewAppliedCouponValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AppliedCouponValue {
	object, diags := NewAppliedCouponValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAppliedCouponValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AppliedCouponType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAppliedCouponValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAppliedCouponValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAppliedCouponValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAppliedCouponValueMust(AppliedCouponValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AppliedCouponType) ValueType(ctx context.Context) attr.Value {
	return AppliedCouponValue{}
}

var _ basetypes.ObjectValuable = AppliedCouponValue{}

type AppliedCouponValue struct {
	AmountCents                basetypes.Int64Value  `tfsdk:"amount_cents"`
	AmountCentsRemaining       basetypes.Int64Value  `tfsdk:"amount_cents_remaining"`
	AmountCurrency             basetypes.StringValue `tfsdk:"amount_currency"`
	CouponCode                 basetypes.StringValue `tfsdk:"coupon_code"`
	CouponName                 basetypes.StringValue `tfsdk:"coupon_name"`
	CreatedAt                  basetypes.StringValue `tfsdk:"created_at"`
	ExpirationAt               basetypes.StringValue `tfsdk:"expiration_at"`
	ExternalCustomerId         basetypes.StringValue `tfsdk:"external_customer_id"`
	Frequency                  basetypes.StringValue `tfsdk:"frequency"`
	FrequencyDuration          basetypes.Int64Value  `tfsdk:"frequency_duration"`
	FrequencyDurationRemaining basetypes.Int64Value  `tfsdk:"frequency_duration_remaining"`
	LagoCouponId               basetypes.StringValue `tfsdk:"lago_coupon_id"`
	LagoCustomerId             basetypes.StringValue `tfsdk:"lago_customer_id"`
	LagoId                     basetypes.StringValue `tfsdk:"lago_id"`
	PercentageRate             basetypes.StringValue `tfsdk:"percentage_rate"`
	Status                     basetypes.StringValue `tfsdk:"status"`
	TerminatedAt               basetypes.StringValue `tfsdk:"terminated_at"`
	state                      attr.ValueState
}

func (v AppliedCouponValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 17)

	var val tftypes.Value
	var err error

	attrTypes["amount_cents"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["amount_cents_remaining"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["amount_currency"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["coupon_code"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["coupon_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["expiration_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["external_customer_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["frequency"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["frequency_duration"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["frequency_duration_remaining"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["lago_coupon_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["lago_customer_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["lago_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["percentage_rate"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["terminated_at"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 17)

		val, err = v.AmountCents.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["amount_cents"] = val

		val, err = v.AmountCentsRemaining.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["amount_cents_remaining"] = val

		val, err = v.AmountCurrency.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["amount_currency"] = val

		val, err = v.CouponCode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["coupon_code"] = val

		val, err = v.CouponName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["coupon_name"] = val

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.ExpirationAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["expiration_at"] = val

		val, err = v.ExternalCustomerId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["external_customer_id"] = val

		val, err = v.Frequency.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["frequency"] = val

		val, err = v.FrequencyDuration.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["frequency_duration"] = val

		val, err = v.FrequencyDurationRemaining.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["frequency_duration_remaining"] = val

		val, err = v.LagoCouponId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lago_coupon_id"] = val

		val, err = v.LagoCustomerId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lago_customer_id"] = val

		val, err = v.LagoId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lago_id"] = val

		val, err = v.PercentageRate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["percentage_rate"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		val, err = v.TerminatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["terminated_at"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AppliedCouponValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AppliedCouponValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AppliedCouponValue) String() string {
	return "AppliedCouponValue"
}

func (v AppliedCouponValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"amount_cents":                 basetypes.Int64Type{},
		"amount_cents_remaining":       basetypes.Int64Type{},
		"amount_currency":              basetypes.StringType{},
		"coupon_code":                  basetypes.StringType{},
		"coupon_name":                  basetypes.StringType{},
		"created_at":                   basetypes.StringType{},
		"expiration_at":                basetypes.StringType{},
		"external_customer_id":         basetypes.StringType{},
		"frequency":                    basetypes.StringType{},
		"frequency_duration":           basetypes.Int64Type{},
		"frequency_duration_remaining": basetypes.Int64Type{},
		"lago_coupon_id":               basetypes.StringType{},
		"lago_customer_id":             basetypes.StringType{},
		"lago_id":                      basetypes.StringType{},
		"percentage_rate":              basetypes.StringType{},
		"status":                       basetypes.StringType{},
		"terminated_at":                basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"amount_cents":                 v.AmountCents,
			"amount_cents_remaining":       v.AmountCentsRemaining,
			"amount_currency":              v.AmountCurrency,
			"coupon_code":                  v.CouponCode,
			"coupon_name":                  v.CouponName,
			"created_at":                   v.CreatedAt,
			"expiration_at":                v.ExpirationAt,
			"external_customer_id":         v.ExternalCustomerId,
			"frequency":                    v.Frequency,
			"frequency_duration":           v.FrequencyDuration,
			"frequency_duration_remaining": v.FrequencyDurationRemaining,
			"lago_coupon_id":               v.LagoCouponId,
			"lago_customer_id":             v.LagoCustomerId,
			"lago_id":                      v.LagoId,
			"percentage_rate":              v.PercentageRate,
			"status":                       v.Status,
			"terminated_at":                v.TerminatedAt,
		})

	return objVal, diags
}

func (v AppliedCouponValue) Equal(o attr.Value) bool {
	other, ok := o.(AppliedCouponValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AmountCents.Equal(other.AmountCents) {
		return false
	}

	if !v.AmountCentsRemaining.Equal(other.AmountCentsRemaining) {
		return false
	}

	if !v.AmountCurrency.Equal(other.AmountCurrency) {
		return false
	}

	if !v.CouponCode.Equal(other.CouponCode) {
		return false
	}

	if !v.CouponName.Equal(other.CouponName) {
		return false
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.ExpirationAt.Equal(other.ExpirationAt) {
		return false
	}

	if !v.ExternalCustomerId.Equal(other.ExternalCustomerId) {
		return false
	}

	if !v.Frequency.Equal(other.Frequency) {
		return false
	}

	if !v.FrequencyDuration.Equal(other.FrequencyDuration) {
		return false
	}

	if !v.FrequencyDurationRemaining.Equal(other.FrequencyDurationRemaining) {
		return false
	}

	if !v.LagoCouponId.Equal(other.LagoCouponId) {
		return false
	}

	if !v.LagoCustomerId.Equal(other.LagoCustomerId) {
		return false
	}

	if !v.LagoId.Equal(other.LagoId) {
		return false
	}

	if !v.PercentageRate.Equal(other.PercentageRate) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	if !v.TerminatedAt.Equal(other.TerminatedAt) {
		return false
	}

	return true
}

func (v AppliedCouponValue) Type(ctx context.Context) attr.Type {
	return AppliedCouponType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AppliedCouponValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"amount_cents":                 basetypes.Int64Type{},
		"amount_cents_remaining":       basetypes.Int64Type{},
		"amount_currency":              basetypes.StringType{},
		"coupon_code":                  basetypes.StringType{},
		"coupon_name":                  basetypes.StringType{},
		"created_at":                   basetypes.StringType{},
		"expiration_at":                basetypes.StringType{},
		"external_customer_id":         basetypes.StringType{},
		"frequency":                    basetypes.StringType{},
		"frequency_duration":           basetypes.Int64Type{},
		"frequency_duration_remaining": basetypes.Int64Type{},
		"lago_coupon_id":               basetypes.StringType{},
		"lago_customer_id":             basetypes.StringType{},
		"lago_id":                      basetypes.StringType{},
		"percentage_rate":              basetypes.StringType{},
		"status":                       basetypes.StringType{},
		"terminated_at":                basetypes.StringType{},
	}
}
