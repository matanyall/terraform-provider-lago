// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_webhook_endpoints

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func WebhookEndpointsResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"lago_id": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Unique identifier assigned to the webhook endpoint within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the webhook endpoint's record within the Lago system.",
				MarkdownDescription: "Unique identifier assigned to the webhook endpoint within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the webhook endpoint's record within the Lago system.",
			},
			"webhook_endpoint": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"created_at": schema.StringAttribute{
						Computed:            true,
						Description:         "The date of the webhook endpoint creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).",
						MarkdownDescription: "The date of the webhook endpoint creation, represented in ISO 8601 datetime format and expressed in Coordinated Universal Time (UTC).",
					},
					"lago_id": schema.StringAttribute{
						Computed:            true,
						Description:         "Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the webhook endpoint's record within the Lago system.",
						MarkdownDescription: "Unique identifier assigned to the wallet within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the webhook endpoint's record within the Lago system.",
					},
					"lago_organization_id": schema.StringAttribute{
						Computed:            true,
						Description:         "Unique identifier assigned to the organization attached to the webhook endpoint within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the organization's record within the Lago system.",
						MarkdownDescription: "Unique identifier assigned to the organization attached to the webhook endpoint within the Lago application. This ID is exclusively created by Lago and serves as a unique identifier for the organization's record within the Lago system.",
					},
					"signature_algo": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The signature used for the webhook. If no value is passed,",
						MarkdownDescription: "The signature used for the webhook. If no value is passed,",
						Validators: []validator.String{
							stringvalidator.OneOf(
								"jwt",
								"hmac",
							),
						},
					},
					"webhook_url": schema.StringAttribute{
						Required:            true,
						Description:         "The URL of the webhook endpoint.",
						MarkdownDescription: "The URL of the webhook endpoint.",
					},
				},
				CustomType: WebhookEndpointType{
					ObjectType: types.ObjectType{
						AttrTypes: WebhookEndpointValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
		},
	}
}

type WebhookEndpointsModel struct {
	LagoId          types.String         `tfsdk:"lago_id"`
	WebhookEndpoint WebhookEndpointValue `tfsdk:"webhook_endpoint"`
}

var _ basetypes.ObjectTypable = WebhookEndpointType{}

type WebhookEndpointType struct {
	basetypes.ObjectType
}

func (t WebhookEndpointType) Equal(o attr.Type) bool {
	other, ok := o.(WebhookEndpointType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t WebhookEndpointType) String() string {
	return "WebhookEndpointType"
}

func (t WebhookEndpointType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	lagoIdAttribute, ok := attributes["lago_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_id is missing from object`)

		return nil, diags
	}

	lagoIdVal, ok := lagoIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_id expected to be basetypes.StringValue, was: %T`, lagoIdAttribute))
	}

	lagoOrganizationIdAttribute, ok := attributes["lago_organization_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_organization_id is missing from object`)

		return nil, diags
	}

	lagoOrganizationIdVal, ok := lagoOrganizationIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_organization_id expected to be basetypes.StringValue, was: %T`, lagoOrganizationIdAttribute))
	}

	signatureAlgoAttribute, ok := attributes["signature_algo"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`signature_algo is missing from object`)

		return nil, diags
	}

	signatureAlgoVal, ok := signatureAlgoAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`signature_algo expected to be basetypes.StringValue, was: %T`, signatureAlgoAttribute))
	}

	webhookUrlAttribute, ok := attributes["webhook_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`webhook_url is missing from object`)

		return nil, diags
	}

	webhookUrlVal, ok := webhookUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`webhook_url expected to be basetypes.StringValue, was: %T`, webhookUrlAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return WebhookEndpointValue{
		CreatedAt:          createdAtVal,
		LagoId:             lagoIdVal,
		LagoOrganizationId: lagoOrganizationIdVal,
		SignatureAlgo:      signatureAlgoVal,
		WebhookUrl:         webhookUrlVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewWebhookEndpointValueNull() WebhookEndpointValue {
	return WebhookEndpointValue{
		state: attr.ValueStateNull,
	}
}

func NewWebhookEndpointValueUnknown() WebhookEndpointValue {
	return WebhookEndpointValue{
		state: attr.ValueStateUnknown,
	}
}

func NewWebhookEndpointValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (WebhookEndpointValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing WebhookEndpointValue Attribute Value",
				"While creating a WebhookEndpointValue value, a missing attribute value was detected. "+
					"A WebhookEndpointValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WebhookEndpointValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid WebhookEndpointValue Attribute Type",
				"While creating a WebhookEndpointValue value, an invalid attribute value was detected. "+
					"A WebhookEndpointValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("WebhookEndpointValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("WebhookEndpointValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra WebhookEndpointValue Attribute Value",
				"While creating a WebhookEndpointValue value, an extra attribute value was detected. "+
					"A WebhookEndpointValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra WebhookEndpointValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewWebhookEndpointValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewWebhookEndpointValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.StringValue, was: %T`, createdAtAttribute))
	}

	lagoIdAttribute, ok := attributes["lago_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_id is missing from object`)

		return NewWebhookEndpointValueUnknown(), diags
	}

	lagoIdVal, ok := lagoIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_id expected to be basetypes.StringValue, was: %T`, lagoIdAttribute))
	}

	lagoOrganizationIdAttribute, ok := attributes["lago_organization_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`lago_organization_id is missing from object`)

		return NewWebhookEndpointValueUnknown(), diags
	}

	lagoOrganizationIdVal, ok := lagoOrganizationIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`lago_organization_id expected to be basetypes.StringValue, was: %T`, lagoOrganizationIdAttribute))
	}

	signatureAlgoAttribute, ok := attributes["signature_algo"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`signature_algo is missing from object`)

		return NewWebhookEndpointValueUnknown(), diags
	}

	signatureAlgoVal, ok := signatureAlgoAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`signature_algo expected to be basetypes.StringValue, was: %T`, signatureAlgoAttribute))
	}

	webhookUrlAttribute, ok := attributes["webhook_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`webhook_url is missing from object`)

		return NewWebhookEndpointValueUnknown(), diags
	}

	webhookUrlVal, ok := webhookUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`webhook_url expected to be basetypes.StringValue, was: %T`, webhookUrlAttribute))
	}

	if diags.HasError() {
		return NewWebhookEndpointValueUnknown(), diags
	}

	return WebhookEndpointValue{
		CreatedAt:          createdAtVal,
		LagoId:             lagoIdVal,
		LagoOrganizationId: lagoOrganizationIdVal,
		SignatureAlgo:      signatureAlgoVal,
		WebhookUrl:         webhookUrlVal,
		state:              attr.ValueStateKnown,
	}, diags
}

func NewWebhookEndpointValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) WebhookEndpointValue {
	object, diags := NewWebhookEndpointValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewWebhookEndpointValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t WebhookEndpointType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewWebhookEndpointValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewWebhookEndpointValueUnknown(), nil
	}

	if in.IsNull() {
		return NewWebhookEndpointValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewWebhookEndpointValueMust(WebhookEndpointValue{}.AttributeTypes(ctx), attributes), nil
}

func (t WebhookEndpointType) ValueType(ctx context.Context) attr.Value {
	return WebhookEndpointValue{}
}

var _ basetypes.ObjectValuable = WebhookEndpointValue{}

type WebhookEndpointValue struct {
	CreatedAt          basetypes.StringValue `tfsdk:"created_at"`
	LagoId             basetypes.StringValue `tfsdk:"lago_id"`
	LagoOrganizationId basetypes.StringValue `tfsdk:"lago_organization_id"`
	SignatureAlgo      basetypes.StringValue `tfsdk:"signature_algo"`
	WebhookUrl         basetypes.StringValue `tfsdk:"webhook_url"`
	state              attr.ValueState
}

func (v WebhookEndpointValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["lago_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["lago_organization_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["signature_algo"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["webhook_url"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.LagoId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lago_id"] = val

		val, err = v.LagoOrganizationId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["lago_organization_id"] = val

		val, err = v.SignatureAlgo.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["signature_algo"] = val

		val, err = v.WebhookUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["webhook_url"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v WebhookEndpointValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v WebhookEndpointValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v WebhookEndpointValue) String() string {
	return "WebhookEndpointValue"
}

func (v WebhookEndpointValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"created_at":           basetypes.StringType{},
		"lago_id":              basetypes.StringType{},
		"lago_organization_id": basetypes.StringType{},
		"signature_algo":       basetypes.StringType{},
		"webhook_url":          basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_at":           v.CreatedAt,
			"lago_id":              v.LagoId,
			"lago_organization_id": v.LagoOrganizationId,
			"signature_algo":       v.SignatureAlgo,
			"webhook_url":          v.WebhookUrl,
		})

	return objVal, diags
}

func (v WebhookEndpointValue) Equal(o attr.Value) bool {
	other, ok := o.(WebhookEndpointValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.LagoId.Equal(other.LagoId) {
		return false
	}

	if !v.LagoOrganizationId.Equal(other.LagoOrganizationId) {
		return false
	}

	if !v.SignatureAlgo.Equal(other.SignatureAlgo) {
		return false
	}

	if !v.WebhookUrl.Equal(other.WebhookUrl) {
		return false
	}

	return true
}

func (v WebhookEndpointValue) Type(ctx context.Context) attr.Type {
	return WebhookEndpointType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v WebhookEndpointValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at":           basetypes.StringType{},
		"lago_id":              basetypes.StringType{},
		"lago_organization_id": basetypes.StringType{},
		"signature_algo":       basetypes.StringType{},
		"webhook_url":          basetypes.StringType{},
	}
}
